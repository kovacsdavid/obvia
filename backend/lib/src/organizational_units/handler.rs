/*
 * This file is part of the Obvia ERP.
 *
 * Copyright (C) 2025 Kovács Dávid <kapcsolat@kovacsdavid.dev>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

use crate::auth::dto::claims::Claims;
use crate::auth::middleware::AuthenticatedUser;
use crate::common::error::FriendlyError;
use crate::common::repository::PoolWrapper;
use crate::organizational_units::OrganizationalUnitsModule;
use crate::organizational_units::dto::{CreateRequest, CreateRequestHelper};
use crate::organizational_units::repository::OrganizationalUnitsRepository;
use crate::organizational_units::service::try_create;
use axum::extract::State;
use axum::extract::rejection::JsonRejection;
use axum::http::StatusCode;
use axum::response::IntoResponse;
use axum::response::Response;
use axum::{Json, debug_handler};
use std::sync::Arc;
use tracing::Level;

/// Asynchronous function handling the creation logic for organizational units.
///
/// This function processes the incoming request payload, validates it, and delegates
/// the handling logic to the `try_create` function with necessary parameters. On success,
/// it returns a `CREATED` HTTP response along with the created resource. On failure,
/// it returns an appropriate error response.
///
/// # Parameters
/// - `claims`: The user claims object which contains authentication and authorization details.
/// - `organizational_units_module`: Shared, thread-safe reference to the module handling
///   organizational units logic.
/// - `payload`: Incoming request payload parsed as a `Result<Json<CreateRequestHelper>, JsonRejection>`
///   where `JsonRejection` indicates an error in parsing JSON.
/// - `repo_factory`: A function that returns a future resolving to a boxed `OrganizationalUnitsRepository`
///   implementation. This allows mocking this function for testing.
///
/// # Returns
/// - `Response`: The HTTP response to the client. It could be a successful `CREATED` status
///   with a JSON payload of the created resource, or an error response depending on the outcome.
///
/// # Errors
/// - Returns a `BAD_REQUEST` response if the JSON payload is invalid or cannot be parsed.
/// - If the `try_create` function encounters an error, it propagates the appropriate response
///   generated by the `try_create` error handling logic.
pub async fn create_inner<F, Fut>(
    claims: Claims,
    organizational_units_module: Arc<OrganizationalUnitsModule>,
    payload: Result<Json<CreateRequestHelper>, JsonRejection>,
    repo_factory: F,
) -> Response
where
    F: Fn() -> Fut + Send + Sync,
    Fut: Future<Output = Box<dyn OrganizationalUnitsRepository + Send + Sync>>,
{
    match payload {
        Ok(Json(payload)) => match CreateRequest::try_from(payload) {
            Ok(user_input) => {
                let mut repo = repo_factory().await;
                match try_create(&mut *repo, claims, user_input, organizational_units_module).await
                {
                    Ok(resp) => (StatusCode::CREATED, Json(resp)).into_response(),
                    Err(e) => e.into_response(),
                }
            }
            Err(e) => e.into_response(),
        },
        Err(_) => FriendlyError::UserFacing(
            StatusCode::BAD_REQUEST,
            "ORGANIZATIONAL_UNITS/HANDLER/CREATE".to_string(),
            "Invalid JSON".to_string(),
        )
        .trace(Level::DEBUG)
        .into_response(),
    }
}

/// Handles the creation of an organizational unit.
///
/// This asynchronous function processes a request to create an organizational unit, performing
/// authentication, state handling, and validation of the payload before delegating the core
/// process to the `create_inner` function.
///
/// # Parameters
/// - `AuthenticatedUser(claims)`: Represents the authenticated user's claims, required for
///   authorization and context.
/// - `State(organizational_unit_module)`: A shared state containing the `OrganizationalUnitsModule`
///   object. This module provides access to necessary services and utilities related to
///   organizational units.
/// - `payload`: The input payload wrapped in a `Result` object, which contains either:
///     - `Json<CreateRequestHelper>`: A valid JSON payload for creating an organizational unit.
///     - `JsonRejection`: An error generated during JSON deserialization or validation.
///
/// # Returns
/// A `Response` object representing the outcome of the organizational unit creation process:
/// - A successful response if the creation operation completes successfully.
/// - An appropriate error response if any step of the process fails (e.g., authentication error,
///   invalid payload, or data processing failure).
///
/// # Implementation Details
/// This function does the following:
/// 1. Extracts the authenticated user's claims.
/// 2. Accesses the `OrganizationalUnitsModule` state.
/// 3. Validates and processes the incoming JSON payload.
/// 4. Invokes the `create_inner` function to perform the core logic of creating the organizational unit.
///    - Passes a closure that asynchronously generates a repository implementation (`PoolWrapper`),
///      which is used to interact with the data layer.
#[debug_handler]
pub async fn create(
    AuthenticatedUser(claims): AuthenticatedUser,
    State(organizational_unit_module): State<Arc<OrganizationalUnitsModule>>,
    payload: Result<Json<CreateRequestHelper>, JsonRejection>,
) -> Response {
    create_inner(
        claims,
        organizational_unit_module.clone(),
        payload,
        || async {
            Box::new(PoolWrapper::new(
                organizational_unit_module
                    .pool_manager
                    .get_default_tenant_pool(),
            )) as Box<dyn OrganizationalUnitsRepository + Send + Sync>
        },
    )
    .await
}

/// Handles the HTTP GET request for an organizational_unit
///
/// This asynchronous function is designed to handle requests that require
/// an authenticated user and access to the `OrganizationalUnitsModule` state.
/// The implementation of this function is currently not provided (`todo!` macro),
/// and should be implemented in the future to define its behavior.
///
/// # Arguments
///
/// * `AuthenticatedUser(_claims)` - Represents the authenticated user making the request.
///   The `_claims` parameter holds the claims or credentials associated with the user,
///   but it is currently unused in the function.
///
/// * `State(_organizational_units_module)` - Provides access to the shared state of the
///   `OrganizationalUnitsModule`. The state is wrapped in an `Arc` for thread-safe sharing,
///   but it is currently unused in the function.
///
/// # Returns
///
/// A `Response` object representing the HTTP response to be sent to the client.
/// The exact contents and behavior of the response are not yet defined as the
/// implementation is pending.
pub async fn get(
    AuthenticatedUser(_claims): AuthenticatedUser,
    State(_organizational_units_module): State<Arc<OrganizationalUnitsModule>>,
) -> Response {
    todo!();
}

/// Handles the listing of organizational units for an authenticated user.
///
/// This asynchronous function processes a request to list organizational units, ensuring that
/// the user is authenticated before proceeding. The function currently contains a placeholder
/// (`todo!`) and needs implementation to fulfill its intended purpose.
///
/// # Parameters
/// - `AuthenticatedUser(_claims)`: The `_claims` represent the authentication
///   claims of the user. Currently unused.
/// - `State(_organizational_units_module)`: Shared application state of type `Arc<OrganizationalUnitsModule>`,
///   used to facilitate the interaction with the data layer.
///
/// # Returns
/// - `Response`: An HTTP response that will eventually return the results of listing organizational
///   units or an appropriate error response if issues occur.
pub async fn list(
    AuthenticatedUser(_claims): AuthenticatedUser,
    State(_organizational_units_module): State<Arc<OrganizationalUnitsModule>>,
) -> Response {
    todo!();
}
